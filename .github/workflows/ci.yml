name: CI
on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  DIST_ARCHIVE_PREFIX_NAME: ${{ github.event.repository.name }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'
          cache: 'yarn'
      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn
      - name: Lint and Test
        run: |
          yarn eslint:check

  release:
    name: Release
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get the version
        id: get_version
        run: |
          echo "PACKAGE_VERSION_NAME=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "COMMIT_ID=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_ENV
          echo "TAG_NAME=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date "+%Y-%m-%d-%H-%M")" >> $GITHUB_ENV
      # - name: Set archive name
      #   id: set_name
      #   run: |
      #     echo "DIST_ZIP_NAME=$(echo "${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION_NAME }}-${{env.BUILD_TIMESTAMP}}-${{ env.COMMIT_ID }}.zip")" >> $GITHUB_ENV
      #     echo "SOURCE_ZIP_NAME=$(echo "source-${{ env.DIST_ARCHIVE_PREFIX_NAME }}-${{ env.PACKAGE_VERSION_NAME }}-${{env.BUILD_TIMESTAMP}}-${{ env.COMMIT_ID }}.zip")" >> $GITHUB_ENV
      # - name: Archive source code
      #   uses: papeloto/action-zip@v1
      #   with:
      #     files: |
      #       ./
      #     recursive: false
      #     dest: ${{ env.SOURCE_ZIP_NAME }}
      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ matrix.node-version }}
      #     registry-url: 'https://registry.npmjs.org/'
      #     cache: 'yarn'
      # - name: Restore yarn cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cache/yarn
      #       **/node_modules
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-
      # - name: Install dependencies
      #   run: yarn
      # - name: Build
      #   working-directory: ./
      #   run: |
      #     yarn docs:build
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: '.github/config/changelog_configuration.json'
          ignorePreReleases: 'false'
      # - name: Deploy github page
      #   uses: JamesIves/github-pages-deploy-action@v4.4.1
      #   with:
      #     ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      #     branch: gh-pages
      #     folder: docs/.vuepress/dist
      # - name: Archive dist
      #   uses: papeloto/action-zip@v1
      #   with:
      #     files: |
      #       docs/.vuepress/dist
      #     recursive: false
      #     dest: ${{ env.DIST_ZIP_NAME }}
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{steps.build_changelog.outputs.changelog}}
          name: ${{ env.PACKAGE_VERSION_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          # files: |
          #   ${{ env.SOURCE_ZIP_NAME }}
          #   ${{ env.DIST_ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

  push-release-message:
    name: Push release message
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Push message
        uses: funnyzak/pushoo-action@main
        with:
          platforms: ifttt,wecombot,bark
          tokens: ${{ secrets.PUSH_TOKEN }}
          content: |
            # ${{ github.event.repository.name }} Released
            ## trigger: ${{ github.event_name }} at ${{ github.event.head_commit.timestamp }}
            ## commit message: ${{ github.event.head_commit.message }}
            ## commit url: ${{ github.event.head_commit.url }}
            ## commit author: ${{ github.event.head_commit.author.name }}
            ## commit email: ${{ github.event.head_commit.author.email }}
            ## commit id: ${{ github.event.head_commit.id }}
          title: |
            ${{ github.repository }} ${{ github.event_name }} Message
          options: '{"bark": { "url": "https://github.com/${{github.repository}}" }}'
          debug: false
